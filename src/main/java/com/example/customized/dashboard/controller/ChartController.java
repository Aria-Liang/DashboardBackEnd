package com.example.customized.dashboard.controller;

import com.example.customized.dashboard.service.ChartService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.util.Map;

// Marks this class as a REST controller, exposing API endpoints
@RestController
@RequestMapping("/api/dashboard") // Base URL for all endpoints in this controller
public class ChartController {

    // Automatically injects the ChartService dependency
    @Autowired
    private ChartService chartService;

    /**
     * Endpoint to return mock data for testing.
     * 
     * @return A map containing mock data generated by the service layer
     * @throws IOException If there is an issue retrieving the mock data
     */
    @GetMapping("/mock")
    public Map<String, Object> getMockData() throws IOException {
        return Map.of("mockData", chartService.getMockData());
    }

    /**
     * Endpoint to fetch the dashboard data for a specific user.
     * 
     * @param userId The ID of the user whose dashboard data is to be fetched
     * @return A map containing the dashboard data
     * @throws IOException If there is an issue retrieving the dashboard data
     */
    @GetMapping("/{userId}")
    public Map<String, Object> getDashboard(@PathVariable String userId) throws IOException {
        return chartService.getDashboard(userId);
    }

    /**
     * Endpoint to add a new chart to the user's dashboard.
     * 
     * @param userId      The ID of the user
     * @param requestBody A map containing dashboardInfo and chartInfo
     * @return A success message
     * @throws IOException If there is an issue adding the chart
     */
    @PostMapping("/{userId}/add")
    public String addChart(
            @PathVariable String userId,
            @RequestBody Map<String, Object> requestBody) throws IOException {
        // Extract dashboard information and chart information from the request body
        Map<String, Object> dashboardInfo = (Map<String, Object>) requestBody.get("dashboardInfo");
        Map<String, Object> chartInfo = (Map<String, Object>) requestBody.get("chartInfo");
        
        // Delegate to the service layer to handle chart addition
        chartService.addChartToDashboard(userId, dashboardInfo, chartInfo);
        return "Chart added successfully!";
    }

    /**
     * Endpoint to delete a specific chart from the user's dashboard.
     * 
     * @param userId  The ID of the user
     * @param chartId The ID of the chart to be deleted
     * @return A success message
     * @throws IOException If there is an issue deleting the chart
     */
    @DeleteMapping("/{userId}/delete/{chartId}")
    public String deleteChart(
            @PathVariable String userId,
            @PathVariable String chartId) throws IOException {
        // Delegate to the service layer to handle chart deletion
        chartService.deleteChart(userId, chartId);
        return "Chart deleted successfully!";
    }

    /**
     * Endpoint to update an existing chart on the user's dashboard.
     * 
     * @param userId       The ID of the user
     * @param chartId      The ID of the chart to be updated
     * @param updatedChart A map containing the updated dashboardInfo and chartInfo
     * @return A success message
     * @throws IOException If there is an issue updating the chart
     */
    @PutMapping("/{userId}/update/{chartId}")
    public String updateChart(
            @PathVariable String userId,
            @PathVariable String chartId,
            @RequestBody Map<String, Object> updatedChart) throws IOException {
        // Extract updated dashboard information and chart information from the request body
        Map<String, Object> dashboardInfo = (Map<String, Object>) updatedChart.get("dashboardInfo");
        Map<String, Object> chartInfo = (Map<String, Object>) updatedChart.get("chartInfo");

        // Delegate to the service layer to handle chart update
        chartService.updateChart(userId, chartId, dashboardInfo, chartInfo);
        return "Chart updated successfully!";
    }
}
